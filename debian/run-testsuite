#!/bin/sh

basedir=$(dirname $0)
. $basedir/testsuite-common

if head -1 debian/changelog | grep UNRELEASED ; then
    severity=check
else
    severity=test
fi

runlevel_path() {
    runlevel=$1
    echo $initddir/../rc$runlevel.d/
}

list_rclinks() {
    (cd $initddir/../. && ls *)
}

insserv_reg() {
    script=$initddir/$1
    shift
    $insserv $debug -c $insconf -p $initddir -o $overridedir $@ $script
}

echo
echo "info: test normal boot sequence scripts, and their order"
echo

cat <<'EOF' > $tmpdir$insconf
$local_fs       +mountall +umountfs
$network        +networking +ifupdown
$named          +named +dnsmasq +lwresd +bind9 $network
$remote_fs      $local_fs +mountnfs +mountnfs-bootclean +umountnfs +sendsigs
$syslog         +syslog +sysklogd
$portmap        portmap
$time           hwclock
<interactive>   udev mountdevsubfs checkroot checkfs console-screen
EOF

insertscript mountkernfs.sh <<EOF
### BEGIN INIT INFO
# Provides:          mountkernfs
# Required-Start:
# Required-Stop:
# Should-Start:      glibc
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript mountdevsubfs.sh <<'EOF'
### BEGIN INIT INFO
# Provides:          mountdevsubfs mountvirtfs
# Required-Start:    mountkernfs
# Required-Stop:
# Should-Start:      udev
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript checkroot.sh <<'EOF'
### BEGIN INIT INFO
# Provides:          checkroot
# Required-Start:    mountdevsubfs
# Required-Stop:
# Should-Start:      keymap hwclockfirst
# Should-stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript ifupdown-clean <<'EOF'
### BEGIN INIT INFO
# Provides:          ifupdown-clean
# Required-Start:    checkroot
# Required-Stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript ifupdown <<'EOF'
### BEGIN INIT INFO
# Provides:          ifupdown
# Required-Start:    ifupdown-clean
# Required-Stop:     $local_fs
# Default-Start:     S
# Default-Stop:      0 6
### END INIT INFO
EOF

insertscript checkroot.sh <<'EOF'
### BEGIN INIT INFO
# Provides:          checkroot
# Required-Start:    mountdevsubfs
# Required-Stop:
# Should-Start:      keymap hwclockfirst
# Should-stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript checkfs.sh <<'EOF'
### BEGIN INIT INFO
# Provides:          checkfs
# Required-Start:    checkroot
# Required-Stop:
# Should-Start:      lvm cryptdisks
# Should-Stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript mountall.sh <<'EOF'
### BEGIN INIT INFO
# Provides:          mountall
# Required-Start:    checkfs
# Required-Stop:
# Should-Start:      lvm
# Should-Stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript mountnfs.sh <<'EOF'
### BEGIN INIT INFO
# Provides:          mountnfs
# Required-Start:    $local_fs
# Required-Stop:
# Should-Start:      $network
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript beforenfs <<'EOF'
### BEGIN INIT INFO
# Provides:          beforenfs
# Required-Start:    $local_fs
# Required-Stop:
# X-Start-Before:    mountnfs
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript hwclock.sh <<'EOF'
### BEGIN INIT INFO
# Provides:          hwclock
# Required-Start:    mountdevsubfs
# Required-Stop:     $local_fs
# Default-Start:     S
# Default-Stop:      0 6
### END INIT INFO
EOF

insertscript killprocs <<'EOF'
### BEGIN INIT INFO
# Provides:          killprocs
# Required-Start:    $local_fs
# Required-Stop:
# Default-Start:     1
# Default-Stop:
### END INIT INFO
EOF

insertscript single <<'EOF'
### BEGIN INIT INFO
# Provides:          single
# Required-Start:    $local_fs killprocs $all
# Required-Stop:
# Default-Start:     1
# Default-Stop:
### END INIT INFO
EOF

insertscript needlocalfs <<'EOF'
### BEGIN INIT INFO
# Provides:          needlocalfs
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO
EOF

insertscript needallfs <<'EOF'
### BEGIN INIT INFO
# Provides:          needallfs
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO
EOF

insertscript sysklogd <<'EOF'
### BEGIN INIT INFO
# Provides:          syslog
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO
EOF

insertscript reboot <<'EOF'
### BEGIN INIT INFO
# Provides:          reboot
# Required-Start:
# Required-Stop:
# Default-Start:
# Default-Stop:      6
### END INIT INFO
EOF

insertscript halt <<'EOF'
### BEGIN INIT INFO
# Provides:          halt
# Required-Start:
# Required-Stop:
# Default-Start:
# Default-Stop:      0
### END INIT INFO
EOF

insertscript umountroot <<'EOF'
### BEGIN INIT INFO
# Provides:          umountroot
# Required-Start:
# Required-Stop:
# Should-Stop:       halt reboot
# Default-Start:
# Default-Stop:      0 6
### END INIT INFO
EOF

insertscript umountfs <<'EOF'
### BEGIN INIT INFO
# Provides:          umountfs
# Required-Start:
# Required-Stop:     umountroot
# Default-Start:
# Default-Stop:      0 6
### END INIT INFO
EOF

insertscript umountnfs <<'EOF'
### BEGIN INIT INFO
# Provides:          umountnfs
# Required-Start:
# Required-Stop:     umountfs
# Default-Start:
# Default-Stop:      0 6
### END INIT INFO
EOF

insertscript needallfs2 <<'EOF'
### BEGIN INIT INFO
# Provides:          needallfs2
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# X-Start-Before:    needallfs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO
EOF

insertscript kexec <<'EOF'
### BEGIN INIT INFO
# Provides:             kexec
# Required-Start:
# Required-Stop:        reboot
# X-Stop-After:         umountroot
# Default-Start:
# Default-Stop:         6
### END INIT INFO
EOF

insertscript networking <<'EOF'
### BEGIN INIT INFO
# Provides:          networking
# Required-Start:    mountkernfs ifupdown $local_fs
# Required-Stop:     ifupdown $local_fs
# Default-Start:     S
# Default-Stop:      0 6
### END INIT INFO
EOF

insertscript nolsbheader <<'EOF'
EOF

list_rclinks

check_order S mountkernfs.sh mountdevsubfs.sh
check_order S ifupdown-clean ifupdown
check_order S ifupdown-clean ifupdown
check_order S mountall.sh mountnfs.sh
check_order S mountall.sh beforenfs
check_order S beforenfs mountnfs.sh

check_order 0 needallfs umountnfs
check_order 0 umountroot halt

check_order 1 killprocs single
check_order 1 needallfs killprocs

check_order 2 needlocalfs needallfs
check_order 2 needlocalfs nolsbheader
check_order 2 sysklogd nolsbheader
check_order 2 needallfs2 needallfs

check_order 6 needallfs umountnfs
check_order 6 nolsbheader umountnfs
check_order 6 umountfs umountroot
check_order 6 umountnfs umountfs
check_order 6 umountroot reboot
check_order 6 umountroot kexec
check_order 6 kexec reboot

echo
echo "info: test if override files replace headers in the file"
echo
rm -rf $initddir
mkdir -p $initddir

# Two scripts with a loop between them
insertscript base <<'EOF' || true
### BEGIN INIT INFO
# Provides:          base
# Required-Start:
# Required-Stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript mover <<'EOF' || true
### BEGIN INIT INFO
# Provides:          mover
# Required-Start:    base
# Required-Stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

check_order S base mover

mkdir -p $overridedir
cat <<'EOF' > $overridedir/mover
### BEGIN INIT INFO
# Provides:          mover
# Required-Start:
# Required-Stop:
# X-Start-Before:    base
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insserv_reg mover

list_rclinks

# Make sure the override file moved mover before base
check_order S mover base

echo
echo "info: testing to insert scripts with a loop, and the effect of an override file"
echo
rm -rf $initddir
mkdir -p $initddir

# Two scripts with a loop between them
if insertscript loop1 <<'EOF' ; then
### BEGIN INIT INFO
# Provides:          loop1
# Required-Start:    loop2
# Required-Stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF
    error "inserting script with missing dependencies did not fail"
fi

insertscript loop2 <<'EOF' || true
### BEGIN INIT INFO
# Provides:          loop2
# Required-Start:    loop1
# Required-Stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

# Test if override file can be used to break the loop
mkdir -p $overridedir
cat <<'EOF' > $overridedir/loop1
### BEGIN INIT INFO
# Provides:          loop1
# Required-Start:
# Required-Stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

check_script_not_present S loop1
check_script_not_present S loop2

insserv_reg loop1 || true
insserv_reg loop2 || true

check_order S loop1 loop2

echo
echo "info: testing to insert scripts with a longer loop, making sure it fail"
echo
rm -rf $initddir
mkdir -p $initddir

# Three scripts with a loop between them, make sure introducing the
# loop fail, as it will make insserv generate a unstable and broken
# boot and shutdown sequence.
insertscript loop1 <<'EOF'
### BEGIN INIT INFO
# Provides:          loop1
# Required-Start:
# Required-Stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript loop2 <<'EOF' || true
### BEGIN INIT INFO
# Provides:          loop2
# Required-Start:    loop1
# Required-Stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

if insertscript loop3 <<'EOF' ; then
### BEGIN INIT INFO
# Provides:          loop3
# Required-Start:    loop2
# Required-Stop:
# X-Start-Before:    loop1
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF
    error "inserting script causing a loop did not fail"
fi

# Test real loop in the combined start and stop sequence.  There is no
# loop in the start sequence, and no loop in the stop sequence, but in
# the combined graph insserv is creating internally, there is a loop.
# This make sense, as scripts need to be installed in dependency
# order, and there is no way to install these scripts that make sure
# both start and stop dependencies are fulfilled.
echo
echo "info: test handling of loops in the combination of start and stop sequences"
echo

rm -rf $initddir
mkdir -p $initddir

insertscript startfirst <<'EOF' || true
### BEGIN INIT INFO
# Provides:          startfirst
# Required-Start:
# Required-Stop:     startsecond
# Default-Start:     S
# Default-Stop:      6
### END INIT INFO
EOF

insertscript startsecond <<'EOF' || true
### BEGIN INIT INFO
# Provides:          startsecond
# Required-Start:    startfirst
# Required-Stop:
# Default-Start:     S
# Default-Stop:      6
### END INIT INFO
EOF

list_rclinks

test_order S startfirst startsecond
test_order 6 startsecond startfirst

# Test another fake loop.  This one should work, as it is possible to
# install the two scripts in sequence because one of the dependencies
# are optional.  It does not with insserv today.
echo
echo "info: test handling of 'fake' loops in the combination of start and stop sequences"
echo

rm -rf $initddir
mkdir -p $initddir

insertscript startfirst_stopfirst <<'EOF' || true
### BEGIN INIT INFO
# Provides:          startfirst_stopfirst
# Required-Start:
# Required-Stop:
# Should-Stop:       startsecond_stoplast
# Default-Start:     S
# Default-Stop:      6
### END INIT INFO
EOF

insertscript startsecond_stoplast <<'EOF' || true
### BEGIN INIT INFO
# Provides:          startsecond_stoplast
# Required-Start:    startfirst_stopfirst
# Required-Stop:
# Default-Start:     S
# Default-Stop:      6
### END INIT INFO
EOF

list_rclinks

# Test another fake loop using reverse dependencies to document that
# it can happen based on information provided in one package only.
# This should work, as it is possible to install the two scripts in
# sequence because one of the dependencies are optional.  It does not
# with insserv today.  Note thought that the generated order is
# different from the one above.

echo
echo "info: test handling of 'fake' loops using reverse depends"
echo

rm -rf $initddir
mkdir -p $initddir

insertscript startfirst_stopfirst <<'EOF' || true
### BEGIN INIT INFO
# Provides:          startfirst_stopfirst
# Required-Start:
# Required-Stop:
# Default-Start:     S
# Default-Stop:      6
### END INIT INFO
EOF

insertscript startsecond_stoplast <<'EOF' || true
### BEGIN INIT INFO
# Provides:          startsecond_stoplast
# Required-Start:    startfirst_stopfirst
# Required-Stop:
# X-Stop-After:      startfirst_stopfirst
# Default-Start:     S
# Default-Stop:      6
### END INIT INFO
EOF

list_rclinks

# These are checking real bugs, but until bug #458582 is fixed, they
# will fail.  Making the tests non-fatal because of this.
${severity}_order S startfirst_stopfirst startsecond_stoplast
${severity}_order 6 startfirst_stopfirst startsecond_stoplast 

echo
echo "info: test if bad script in init.d/ with no symlinks in rc*.d/ make problems"
echo

rm -rf $initddir
mkdir -p $initddir

addscript sitelocal <<'EOF' || true
### BEGIN INIT INFO
# Provides:          duplicate
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     S
# Default-Stop:      6
### END INIT INFO
EOF

insertscript distroglobal <<'EOF' || true
### BEGIN INIT INFO
# Provides:          dublicate
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     S
# Default-Stop:      6
### END INIT INFO
EOF

list_rclinks

check_script_present S distroglobal

echo
echo "info: check that it work to insert scripts with only stop runlevels"
echo
# This test check that the common way to update the runlevels used by
# a given script is working.  It simulates these calls to update-rc.d:
#  update-rc.d oldscript default
#  update-rc.d -f oldscript remove
#  update-rc.d oldscript start 20 2 3 4 5 . stop 20 1 .

rm -rf $initddir
mkdir -p $initddir

insertscript onlystop <<'EOF' || true
addscript onlystop <<'EOF' || true
### BEGIN INIT INFO
# Provides:          onlystop
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:
# Default-Stop:      0 6
### END INIT INFO
EOF

list_rclinks

check_script_present 0 onlystop
check_script_present 6 onlystop

check_script_not_present 1 onlystop
check_script_not_present 2 onlystop
check_script_not_present 3 onlystop
check_script_not_present 4 onlystop
check_script_not_present 5 onlystop
check_script_not_present S onlystop

echo
echo "info: test if script removal removes all symlinks."
echo "warning: This test should be fatal, but is non-fatal until a fix is found."
echo
# This test check that the common way to update the runlevels used by
# a given script is working.  It simulates these calls to update-rc.d:
#  update-rc.d oldscript default
#  update-rc.d -f oldscript remove
#  update-rc.d oldscript start 20 2 3 4 5 . stop 20 1 .

rm -rf $initddir
mkdir -p $initddir

insertscript oldscript <<'EOF' || true
addscript oldscript <<'EOF' || true
### BEGIN INIT INFO
# Provides:          oldscript
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO
EOF

# Check that the problematic symlinks are presend, as well as one that
# is OK.
check_script_present 0 oldscript
check_script_present 1 oldscript
check_script_present 3 oldscript
check_script_present 6 oldscript

addscript oldscript <<'EOF' || true
### BEGIN INIT INFO
# Provides:          oldscript
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 4 5
# Default-Stop:      1
### END INIT INFO
EOF

# Remove old symlinks
insserv_reg oldscript -r
# Insert new ones, this time without runlevel 0 and 6
insserv_reg oldscript

list_rclinks

${severity}_script_not_present 0 oldscript
${severity}_script_present 1 oldscript
${severity}_script_present 2 oldscript
${severity}_script_not_present 3 oldscript
${severity}_script_not_present 6 oldscript

finish_test
