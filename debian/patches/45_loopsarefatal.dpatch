#! /bin/sh /usr/share/dpatch/dpatch-run
## 45_loopsarefatal.dpatch by Petter Reinholdtsen

To avoid introducing broken boot and shutdown sequences, it is
important that no loops are detected when inserting a script.  This
patch is a naive fix to make sure any loop detected is a fatal error.
The alternative is a broken boot or shutdown sequence.

It will also report "fake loops" as described in #458582 as fatal, but
that is intentional as these fake loops also confuse insserv to a
point where its generated boot and shutdown sequence is broken.

@DPATCH@
diff -urNad insserv~/insserv.c insserv/insserv.c
--- insserv~/insserv.c	2008-01-05 10:17:45.000000000 +0100
+++ insserv/insserv.c	2008-01-05 10:18:31.000000000 +0100
@@ -2385,6 +2385,9 @@
      */
     follow_all();
 
+    if (is_loop_detected())
+	error("exiting now!\n");
+
     /*
      * Re-order some well known scripts to get
      * a more stable order collection.
diff -urNad insserv~/listing.c insserv/listing.c
--- insserv~/listing.c	2008-01-05 10:17:45.000000000 +0100
+++ insserv/listing.c	2008-01-05 10:17:45.000000000 +0100
@@ -415,6 +415,17 @@
     }
 }
 
+boolean is_loop_detected(void)
+{
+    list_t *tmp;
+    list_for_each(tmp, d_start) {
+	dir_t * dir = getdir(tmp);
+	if (dir->flags & DIR_LOOPREPORT)
+	    return true;
+    }
+    return false;
+}
+
 /*
  * For debuging: show all services
  */
diff -urNad insserv~/listing.h insserv/listing.h
--- insserv~/listing.h	2008-01-05 10:17:43.000000000 +0100
+++ insserv/listing.h	2008-01-05 10:17:45.000000000 +0100
@@ -88,6 +88,7 @@
 extern const char * getprovides(const char * script);
 extern boolean listscripts(const char ** script, const int lvl);
 extern int maxorder;
+extern boolean is_loop_detected(void);
 
 /*
  * Common short cuts
