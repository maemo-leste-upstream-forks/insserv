From 5b6a46aee23d8222eec87b62e24ff8dad5c5bb99 Mon Sep 17 00:00:00 2001
From: Merlijn Wajer <merlijn@wizzup.org>
Date: Fri, 5 Jun 2020 15:16:48 +0200
Subject: [PATCH] HACK: support openrc in insserv

OpenRC scripts do not have LSB tags, so don't complain about them.
---
 insserv.c | 97 ++++++++++++++++++++++++++++++++++++++++++-------------
 1 file changed, 74 insertions(+), 23 deletions(-)

diff --git a/insserv.c b/insserv.c
index 1fffd72..262e974 100644
--- a/insserv.c
+++ b/insserv.c
@@ -1284,6 +1284,36 @@ static inline void scan_script_reset(void)
     xreset(script_inf.interactive);
 }
 
+/*
+ * return if file is an openrc script
+ */
+static int is_openrc_script(const char *path)
+{
+    char* buf[64];
+    FILE* script = NULL;
+    size_t cnt = 0;
+    int ret = 0;
+
+    script = fopen(path, "r");
+    if (script == NULL) {
+        warn("Can not open potential openrc script %s: %s\n", path, strerror(errno));
+        return 0;
+    }
+
+    cnt = fread(buf, sizeof(char), 63, script);
+    if (cnt > 1) {
+        if (strstr((const char*)buf, "#!/sbin/openrc-run") != NULL) {
+            ret = 1;
+            goto done;
+        }
+    }
+
+done:
+    fclose(script);
+
+    return ret;
+}
+
 /*
  * return name of upstart job if the script is a symlink to
  * /lib/init/upstart-job, or NULL if path do not point to an
@@ -1355,6 +1385,7 @@ static char *is_upstart_job(const char *path)
 #define FOUND_LSB_OVERRIDE 0x04
 #define FOUND_LSB_UPSTART  0x08
 #define FOUND_LSB_SYSTEMD  0x10
+#define FOUND_LSB_OPENRC   0x20
 
 static int o_flags = O_RDONLY;
 
@@ -1385,7 +1416,10 @@ static uchar scan_lsb_headers(const int dfd, const char *restrict const path,
 
     info(2, "Loading %s\n", path);
 
-    if (NULL != (upstart_job = is_upstart_job(path))) {
+    if (is_openrc_script(path)) {
+	ret |= FOUND_LSB_OPENRC;
+	return ret;
+    } else if (NULL != (upstart_job = is_upstart_job(path))) {
 	char cmd[PATH_MAX];
 	int len;
 	len = snprintf(cmd, sizeof(cmd), "%s %s lsb-header", upstartjob_path, upstart_job);
@@ -1712,6 +1746,12 @@ static uchar scan_script_defaults(int dfd, const char *restrict const path,
 	}
     }
 
+    if (is_openrc_script(path)) {
+	ret |= scan_lsb_headers(dfd, path, cache, ignore);
+	if (ret & FOUND_LSB_OPENRC)
+	    goto out;
+    }
+
     if (NULL != (upstart_job = is_upstart_job(path))) {
 	xreset(upstart_job);
 	/*
@@ -1927,12 +1967,14 @@ static void scan_script_locations(const char *const path, const char *const over
 		if (!lsb)
 		    service->attr.flags |= SERV_NOTLSB;
 
-		if ((lsb & FOUND_LSB_HEADER) == 0) {
-		    if ((lsb & (FOUND_LSB_DEFAULT|FOUND_LSB_OVERRIDE)) == 0)
-		      warn("warning: script '%s' missing LSB tags and overrides\n", d->d_name);
-		    else
-  		        warn("warning: script '%s' missing LSB tags\n", d->d_name);
-		}
+                if ((lsb & FOUND_LSB_OPENRC) == 0) {
+                    if ((lsb & FOUND_LSB_HEADER) == 0) {
+                        if ((lsb & (FOUND_LSB_DEFAULT|FOUND_LSB_OVERRIDE)) == 0)
+                          warn("warning: script '%s' missing LSB tags and overrides\n", d->d_name);
+                        else
+                          warn("warning: script '%s' missing LSB tags\n", d->d_name);
+                    }
+                }
 
 		if (script_inf.required_start && script_inf.required_start != empty) {
 		    rememberreq(service, REQ_MUST, script_inf.required_start);
@@ -2928,12 +2970,14 @@ int main (int argc, char *argv[])
 	char * provides, * begin, * token;
 	const uchar lsb = scan_script_defaults(dfd, name, override_path, (char**)0, true, ignore);
 
-	if ((lsb & FOUND_LSB_HEADER) == 0) {
-	    if ((lsb & (FOUND_LSB_DEFAULT|FOUND_LSB_OVERRIDE)) == 0)
-	        warn("warning: script '%s' missing LSB tags and overrides\n", name);
-	    else
-	        warn("warning: script '%s' missing LSB tags\n", name);
-	}
+        if ((lsb & FOUND_LSB_OPENRC) == 0) {
+            if ((lsb & FOUND_LSB_HEADER) == 0) {
+                if ((lsb & (FOUND_LSB_DEFAULT|FOUND_LSB_OVERRIDE)) == 0)
+                    warn("warning: script '%s' missing LSB tags and overrides\n", name);
+                else
+                    warn("warning: script '%s' missing LSB tags\n", name);
+            }
+        }
 
 	if (!script_inf.provides || script_inf.provides == empty)
 	    script_inf.provides = xstrdup(name);
@@ -3123,12 +3167,14 @@ int main (int argc, char *argv[])
 	/* main scanner for LSB comment in current script */
 	lsb = scan_script_defaults(dfd, d->d_name, override_path, (char**)0, false, ignore);
 
-	if ((lsb & FOUND_LSB_HEADER) == 0) {
-	    if ((lsb & (FOUND_LSB_DEFAULT|FOUND_LSB_OVERRIDE)) == 0)
-	        warn("warning: script '%s' missing LSB tags and overrides\n", d->d_name);
-	    else
-	        warn("warning: script '%s' missing LSB tags\n", d->d_name);
-	}
+        if ((lsb & FOUND_LSB_OPENRC) == 0) {
+            if ((lsb & FOUND_LSB_HEADER) == 0) {
+                if ((lsb & (FOUND_LSB_DEFAULT|FOUND_LSB_OVERRIDE)) == 0)
+                    warn("warning: script '%s' missing LSB tags and overrides\n", d->d_name);
+                else
+                    warn("warning: script '%s' missing LSB tags\n", d->d_name);
+            }
+        }
 
 #ifdef SUSE
 	/* Common script ... */
@@ -3499,8 +3545,9 @@ int main (int argc, char *argv[])
 #ifdef SUSE
 	/* Ahh ... set default multiuser with network */
 	if (!script_inf.default_start || script_inf.default_start == empty) {
-	    if (!script_inf.default_start)
-		warn("Default-Start undefined, assuming default start runlevel(s) for script `%s'\n", d->d_name);
+	    if (!script_inf.default_start) {
+                warn("Default-Start undefined, assuming default start runlevel(s) for script `%s'\n", d->d_name);
+            }
 	    script_inf.default_start = xstrdup(DEFAULT_START_LVL);
 	    xreset(script_inf.default_stop);
 	    script_inf.default_stop = xstrdup(script_inf.default_start);
@@ -3508,7 +3555,9 @@ int main (int argc, char *argv[])
 	}
 #else  /* not SUSE */
 	if (!script_inf.default_start) {
-	    warn("Default-Start undefined, assuming empty start runlevel(s) for script `%s'\n", d->d_name);
+            if ((lsb & FOUND_LSB_OPENRC) == 0) {
+                warn("Default-Start undefined, assuming empty start runlevel(s) for script `%s'\n", d->d_name);
+            }
 	    script_inf.default_start = empty;
 	}
 #endif /* not SUSE */
@@ -3523,7 +3572,9 @@ int main (int argc, char *argv[])
 	}
 #else  /* not SUSE */
 	if (!script_inf.default_stop) {
-	    warn("Default-Stop  undefined, assuming empty stop  runlevel(s) for script `%s'\n", d->d_name);
+            if ((lsb & FOUND_LSB_OPENRC) == 0) {
+                warn("Default-Stop  undefined, assuming empty stop  runlevel(s) for script `%s'\n", d->d_name);
+            }
 	    script_inf.default_stop = empty;
 	}
 #endif /* not SUSE */
-- 
2.24.1
