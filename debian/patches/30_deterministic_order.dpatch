#! /bin/sh /usr/share/dpatch/dpatch-run
## 30_deterministic_order.patch.dpatch by Kel Modderman <kel@otaku42.de>
##
## DP: Purpose: Defend against undeterministic directory stream sequence
## DP:          returned by readdir(3). Make sure script which is being
## DP:          registered is processed before all others.
## DP: Fixes:   #494514
## DP: Status:  Work in progress.

@DPATCH@
--- a/insserv.c
+++ b/insserv.c
@@ -2238,6 +2238,7 @@
     boolean del = false;
     boolean defaults = false;
     boolean ignore = false;
+    boolean loadarg = false;
 
     myname = basename(*argv);
 
@@ -2305,7 +2306,9 @@
     argv += optind;
     argc -= optind;
 
-    if (!argc && del)
+    if (argc)
+	loadarg = true;
+    else if (del)
 	error("usage: %s [[-r] init_script|init_directory]\n", myname);
 
     if (*argv) {
@@ -2490,17 +2493,45 @@
     /*
      * Scan now all scripts found in the init.d/ directory
      */
-    while ((d = readdir(initdir)) != (struct dirent*)0) {
-	const boolean isarg = chkfor(d->d_name, argv, argc);
+    for (;;) {
 	service_t * service = (service_t*)0;
 	char * token;
 	char * begin = (char*)0;	/* hold start pointer of strings handled by strsep() */
 	boolean hard = false;
+	boolean isarg = false;
 	uchar lsb = 0;
 #if defined(DEBUG) && (DEBUG > 0)
 	int nobug = 0;
 #endif
 
+	if ((d = readdir(initdir)) == (struct dirent*)0) {
+	    /*
+	     * If first script in argument list was loaded in advance, then
+	     * rewind the init.d/ directory stream and attempt to load all
+	     * other scripts.
+	     */
+	    if (loadarg) {
+		loadarg = false;
+		rewinddir(initdir);
+		continue;
+	    }
+	    break;
+	}
+
+	isarg = chkfor(d->d_name, argv, argc);
+
+	/*
+	 * Load first script in argument list before all other scripts. This
+	 * avoids problems with loading scripts in underterministic sequence
+	 * returned by readdir(3).
+	 */
+	if (loadarg && !isarg)
+	    continue;
+	if (loadarg  && isarg && (curr_argc != 0))
+	    continue;
+	if (!loadarg && isarg && (curr_argc == 0))
+	    continue;
+
 	if (*d->d_name == '.')
 	    continue;
 	errno = 0;
