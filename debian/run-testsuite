#!/bin/sh

set -e

tmpdir=`pwd`/testdir
initddir=$tmpdir/init.d

insserv=`pwd`/insserv
insconf=$tmpdir/insserv.conf
overridedir=$tmpdir/insserv/override

retval=0

mkdir -p $initddir

#debug="-v"

insserv_reg() {
    script=$initddir/$1
    $insserv $debug -c $insconf -p $initddir -o $overridedir $script
}

insertscript() {
    scriptname=$1
    script=$initddir/$scriptname
    cat > $script
    chmod a+rx $script
    insserv_reg $scriptname
}

order_ok() {
    runlevel=$1
    script1=$2
    script2=$3
    order="$(echo $(cd $tmpdir/rc$runlevel.d/; ls *$script1 *$script2 2>/dev/null | sed 's/[SK]..//') )"
    if [ "$order" != "$script1 $script2" ] ; then
	return 0
    fi
    return 1;
}

# Fatal check
check_order() {
    if order_ok $@ ; then
	echo "error: incorrect $runlevel sequence $script1 not before $script2"
	retval=1
    fi
}

# Non-fatal check
test_order() {
    if order_ok $@ ; then
	echo "warning: incorrect $runlevel sequence $script1 not before $script2"
    fi
}

cat <<'EOF' > $insconf
$local_fs       +mountall +umountfs
$network        +networking +ifupdown
$named          +named +dnsmasq +lwresd +bind9 $network
$remote_fs      $local_fs +mountnfs +mountnfs-bootclean +umountnfs +sendsigs
$syslog         +syslog +sysklogd
$portmap        portmap
$time           hwclock +ntpdate +ntp-server
<interactive>   udev mountdevsubfs checkroot checkfs console-screen
EOF

insertscript mountkernfs.sh <<EOF
### BEGIN INIT INFO
# Provides:          mountkernfs
# Required-Start:
# Required-Stop:
# Should-Start:      glibc
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript mountdevsubfs.sh <<'EOF'
### BEGIN INIT INFO
# Provides:          mountdevsubfs mountvirtfs
# Required-Start:    mountkernfs
# Required-Stop:
# Should-Start:      udev
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript checkroot.sh <<'EOF'
### BEGIN INIT INFO
# Provides:          checkroot
# Required-Start:    mountdevsubfs
# Required-Stop:
# Should-Start:      keymap hwclockfirst
# Should-stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript ifupdown-clean <<'EOF'
### BEGIN INIT INFO
# Provides:          ifupdown-clean
# Required-Start:    checkroot
# Required-Stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript ifupdown <<'EOF'
### BEGIN INIT INFO
# Provides:          ifupdown
# Required-Start:    ifupdown-clean
# Required-Stop:     $local_fs
# Default-Start:     S
# Default-Stop:      0 6
### END INIT INFO
EOF

insertscript checkroot.sh <<'EOF'
### BEGIN INIT INFO
# Provides:          checkroot
# Required-Start:    mountdevsubfs
# Required-Stop:
# Should-Start:      keymap hwclockfirst
# Should-stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript checkfs.sh <<'EOF'
### BEGIN INIT INFO
# Provides:          checkfs
# Required-Start:    checkroot
# Required-Stop:
# Should-Start:      lvm cryptdisks
# Should-Stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript mountall.sh <<'EOF'
### BEGIN INIT INFO
# Provides:          mountall
# Required-Start:    checkfs
# Required-Stop:
# Should-Start:      lvm
# Should-Stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript mountnfs.sh <<'EOF'
### BEGIN INIT INFO
# Provides:          mountnfs
# Required-Start:    $local_fs
# Required-Stop:
# Should-Start:      $network
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript beforenfs <<'EOF'
### BEGIN INIT INFO
# Provides:          beforenfs
# Required-Start:    $local_fs
# Required-Stop:
# X-Start-Before:    mountnfs
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript hwclock.sh <<'EOF'
### BEGIN INIT INFO
# Provides:          hwclock
# Required-Start:    mountdevsubfs
# Required-Stop:     $local_fs
# Default-Start:     S
# Default-Stop:      0 6
### END INIT INFO
EOF

insertscript killprocs <<'EOF'
### BEGIN INIT INFO
# Provides:          killprocs
# Required-Start:    $local_fs
# Required-Stop:
# Default-Start:     1
# Default-Stop:
### END INIT INFO
EOF

insertscript single <<'EOF'
### BEGIN INIT INFO
# Provides:          single
# Required-Start:    $local_fs killprocs $all
# Required-Stop:
# Default-Start:     1
# Default-Stop:
### END INIT INFO
EOF

insertscript needlocalfs <<'EOF'
### BEGIN INIT INFO
# Provides:          needlocalfs
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO
EOF

insertscript needallfs <<'EOF'
### BEGIN INIT INFO
# Provides:          needallfs
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO
EOF

insertscript sysklogd <<'EOF'
### BEGIN INIT INFO
# Provides:          syslog
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO
EOF

insertscript reboot <<'EOF'
### BEGIN INIT INFO
# Provides:          reboot
# Required-Start:
# Required-Stop:
# Default-Start:
# Default-Stop:      6
### END INIT INFO
EOF

insertscript halt <<'EOF'
### BEGIN INIT INFO
# Provides:          halt
# Required-Start:
# Required-Stop:
# Default-Start:
# Default-Stop:      0
### END INIT INFO
EOF

insertscript umountroot <<'EOF'
### BEGIN INIT INFO
# Provides:          umountroot
# Required-Start:
# Required-Stop:
# Should-Stop:       halt reboot
# Default-Start:
# Default-Stop:      0 6
### END INIT INFO
EOF

insertscript umountfs <<'EOF'
### BEGIN INIT INFO
# Provides:          umountfs
# Required-Start:
# Required-Stop:     umountroot
# Default-Start:
# Default-Stop:      0 6
### END INIT INFO
EOF

insertscript umountnfs <<'EOF'
### BEGIN INIT INFO
# Provides:          umountnfs
# Required-Start:
# Required-Stop:     umountfs
# Default-Start:
# Default-Stop:      0 6
### END INIT INFO
EOF

insertscript needallfs2 <<'EOF'
### BEGIN INIT INFO
# Provides:          needallfs2
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# X-Start-Before:    needallfs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO
EOF

insertscript kexec <<'EOF'
### BEGIN INIT INFO
# Provides:             kexec
# Required-Start:
# Required-Stop:        reboot
# X-Stop-After:         umountroot
# Default-Start:
# Default-Stop:         6
### END INIT INFO
EOF

insertscript networking <<'EOF'
### BEGIN INIT INFO
# Provides:          networking
# Required-Start:    mountkernfs ifupdown $local_fs
# Required-Stop:     ifupdown $local_fs
# Default-Start:     S
# Default-Stop:      0 6
### END INIT INFO
EOF

insertscript nolsbheader <<'EOF'
EOF

(cd $tmpdir && ls *)

check_order S mountkernfs.sh mountdevsubfs.sh
check_order S ifupdown-clean ifupdown
check_order S ifupdown-clean ifupdown
check_order S mountall.sh mountnfs.sh
check_order S mountall.sh beforenfs
check_order S beforenfs mountnfs.sh

check_order 0 needallfs umountnfs
check_order 0 umountroot halt

check_order 1 killprocs single
check_order 1 needallfs killprocs

check_order 2 needlocalfs needallfs
check_order 2 needlocalfs nolsbheader
check_order 2 sysklogd nolsbheader
check_order 2 needallfs2 needallfs

check_order 6 needallfs umountnfs
check_order 6 nolsbheader umountnfs
check_order 6 umountfs umountroot
check_order 6 umountnfs umountfs
check_order 6 umountroot reboot
check_order 6 umountroot kexec
check_order 6 kexec reboot

rm -rf $initddir

echo
echo "info: testing to insert scripts with a loop"
echo
mkdir -p $initddir

# Two scripts with a loop between them
insertscript loop1 <<'EOF' || true
### BEGIN INIT INFO
# Provides:          loop1
# Required-Start:    loop2
# Required-Stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insertscript loop2 <<'EOF' || true
### BEGIN INIT INFO
# Provides:          loop2
# Required-Start:    loop1
# Required-Stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

# Test if override file can be used to break the loop
mkdir -p $overridedir
cat <<'EOF' > $overridedir/loop1
### BEGIN INIT INFO
# Provides:          loop1
# Required-Start:
# Required-Stop:
# Default-Start:     S
# Default-Stop:
### END INIT INFO
EOF

insserv_reg loop1 || true
insserv_reg loop2 || true

# XXX This do not work yet, as the override file seem to be ignored
test_order S loop1 loop2

# Test fake loop.  The loop is in the combined start and stop
# sequence.  There is no loop in the start sequence, and no loop in
# the stop sequence, but in the combined graph insserv is creating
# internally, there is a loop.  This make sense, as scripts need to be
# installed in dependency order, and there is no way to install these
# scripts that make sure both start and stop dependencies are
# fulfilled.
rm -rf $initddir
mkdir -p $initddir

insertscript startfirst <<'EOF' || true
### BEGIN INIT INFO
# Provides:          startfirst
# Required-Start:
# Required-Stop:     startsecond
# Default-Start:     S
# Default-Stop:      6
### END INIT INFO
EOF

insertscript startsecond <<'EOF' || true
### BEGIN INIT INFO
# Provides:          startsecond
# Required-Start:    startfirst
# Required-Stop:
# Default-Start:     S
# Default-Stop:      6
### END INIT INFO
EOF

(cd $tmpdir && ls *)

test_order S startfirst startsecond
test_order 6 startsecond startfirst

# Test another fake loop.  This one should work, as it is possible to
# install the two scripts in sequence because one of the dependencies
# are optional.  It does not with insserv today.
rm -rf $initddir
mkdir -p $initddir

insertscript startfirst_stopfirst <<'EOF' || true
### BEGIN INIT INFO
# Provides:          startfirst_stopfirst
# Required-Start:
# Required-Stop:
# Should-Stop:       startsecond_stoplast
# Default-Start:     S
# Default-Stop:      6
### END INIT INFO
EOF

insertscript startsecond_stoplast <<'EOF' || true
### BEGIN INIT INFO
# Provides:          startsecond_stoplast
# Required-Start:    startfirst_stopfirst
# Required-Stop:
# Default-Start:     S
# Default-Stop:      6
### END INIT INFO
EOF

(cd $tmpdir && ls *)

# Test another fake loop using reverse dependencies to document that
# it can happen based on information provided in one package only.
# This should work, as it is possible to install the two scripts in
# sequence because one of the dependencies are optional.  It does not
# with insserv today.  Note thought that the generated order is
# different from the one above.

rm -rf $initddir
mkdir -p $initddir

insertscript startfirst_stopfirst <<'EOF' || true
### BEGIN INIT INFO
# Provides:          startfirst_stopfirst
# Required-Start:
# Required-Stop:
# Default-Start:     S
# Default-Stop:      6
### END INIT INFO
EOF

insertscript startsecond_stoplast <<'EOF' || true
### BEGIN INIT INFO
# Provides:          startsecond_stoplast
# Required-Start:    startfirst_stopfirst
# Required-Stop:
# X-Stop-After:      startfirst_stopfirst
# Default-Start:     S
# Default-Stop:      6
### END INIT INFO
EOF

(cd $tmpdir && ls *)

# These are checking real bugs, but until bug #458582 is fixed, they
# will fail.  Making the tests non-fatal because of this.
test_order S startfirst_stopfirst startsecond_stoplast
test_order 6 startfirst_stopfirst startsecond_stoplast 

rm -rf $tmpdir

if [ 0 != $retval ] ; then
    echo "error: one or more test failed."
else
    echo "success: no test failed."
fi
exit $retval
