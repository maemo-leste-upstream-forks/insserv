Purpose: Try to get insserv building on hurd, by avoiding the dummy *at
         functions which exist in libc but always return an error.
Status:  Not yet submitted upstream.

---
Index: insserv/listing.h
===================================================================
--- insserv.orig/listing.h	2009-09-27 15:45:38.000000000 +0200
+++ insserv/listing.h	2009-09-27 15:45:38.000000000 +0200
@@ -307,7 +307,7 @@
 #define xreset(ptr)	\
 	{char *restrict tmp = (char *restrict)ptr; if (ptr && *tmp) free(ptr);} ptr = NULL
 
-#if defined(HAS_unlinkat) && defined(_ATFILE_SOURCE)
+#if defined(HAS_unlinkat) && defined(_ATFILE_SOURCE) && !defined(__stub_unlinkat)
 # define xremove(d,x) (__extension__ ({ if ((dryrun ? 0 : \
 	(unlinkat(d,x,0) != 0 && (errno != EISDIR || unlinkat(d,x,AT_REMOVEDIR) != 0)))) \
 	warn ("can not remove(%s%s): %s\n", rcd, x, strerror(errno)); \
@@ -319,7 +319,7 @@
 	else \
 	info(1, "remove service %s/%s%s\n", path, rcd, x); }))
 #endif
-#if defined(HAS_symlinkat) && defined(_ATFILE_SOURCE)
+#if defined(HAS_symlinkat) && defined(_ATFILE_SOURCE) && !defined(__stub_symlinkat)
 # define xsymlink(d,x,y) (__extension__ ({ if ((dryrun ? 0 : (symlinkat(x, d, y) != 0))) \
 	warn ("can not symlink(%s, %s%s): %s\n", x, rcd, y, strerror(errno)); \
 	else \
@@ -330,19 +330,19 @@
 	else \
 	info(1, "enable service %s -> %s/%s%s\n", x, path, rcd, y); }))
 #endif
-#if defined(HAS_fstatat) && defined(_ATFILE_SOURCE)
+#if defined(HAS_fstatat) && defined(_ATFILE_SOURCE) && !defined(__stub_fstatat)
 # define xstat(d,x,s)	(__extension__ ({ fstatat(d,x,s, 0); }))
 # define xlstat(d,x,s)	(__extension__ ({ fstatat(d,x,s, AT_SYMLINK_NOFOLLOW); }))
 #else
 # define xstat(d,x,s)	(__extension__ ({ stat(x,s); }))
 # define xlstat(d,x,s)	(__extension__ ({ lstat(x,s); }))
 #endif
-#if defined(HAS_readlinkat) && defined(_ATFILE_SOURCE)
+#if defined(HAS_readlinkat) && defined(_ATFILE_SOURCE) && !defined(__stub_readlinkat)
 # define xreadlink(d,x,b,l)	(__extension__ ({ readlinkat(d,x,b,l); }))
 #else
 # define xreadlink(d,x,b,l)	(__extension__ ({ readlink(x,b,l); }))
 #endif
-#if defined(HAS_openat) && defined(_ATFILE_SOURCE)
+#if defined(HAS_openat) && defined(_ATFILE_SOURCE) && !defined(__stub_openat)
 # define xopen(d,x,f)	(__extension__ ({ openat(d,x,f); }))
 #else
 # define xopen(d,x,f)	(__extension__ ({ open(x,f); }))
