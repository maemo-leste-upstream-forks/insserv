To test dependency based reordering of the boot sequence, install the
package, enable parallel booting, and run update-bootsystems-insserv
to make a backup of the boot sequence and reorder the boot scripts.
Be careful to verify the boot sequence before rebooting, as an
incorrect boot sequence can render the system completely unbootable.

In short:

  # Enable parallel booting
  echo CONCURRENCY=shell >> /etc/default/rcS

  # Update boot sequence
  update-bootsystem-insserv

  # At this point, I recommend examining the order in /etc/rcS.d/ and
  # /etc/rc2.d/ carefully, to verify that the configuration actually
  # will boot.  Update /etc/insserv/overrides/ or
  # /usr/share/insserv/overrides/ with better dependency information
  # if the boot order is incorrect, and run insserv -v to update the
  # boot order.

  # Ready to reboot
  shutdown -r now

The next boot should then start services in parallel, as early as
possible during the boot process based on the dependency information
provided.

To monitor the boot sequence, the bootchart project is a good choice.
Debian packages are available in etch and sid.  The project itself is
available from <URL:http://www.bootchart.org/>.

Background info on alternative boot systems in Debian is available from
<URL:http://alioth.debian.org/docman/view.php/30730/38/debconf2-initscripts-bkg.pdf>.

Information on the LSB initscript comment convention is available from
<URL:http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html>,
<URL:http://wiki.debian.net/?LSBInitScripts> and
<URL:http://wiki.debian.org/LSBInitScripts/DependencyBasedBoot>.

Information on an alternative approach to parallelism during boot is
available from
<URL:http://www-128.ibm.com/developerworks/linux/library/l-boot.html>.

A tool to detect cycles is available from Adam Jensen using the git
repository <URL:http://linuxguy.org/git/initcycle.git>.
